#
# LDV2.jl
#
# This file implements new fuel economy and CO2 goals for light
# duty vehicle based on regulations announced.
#
# DEE values for 2013 to 2021 entered as Temps are generated by Transport Division 
# and represent 5 cycle CREE values calculated under the LDV Reg
# Matt Lewis - June 6 2023
#
# DEE values for 2022 to 2026 have been adjusted to reflect new historical data
# for 2021, with % changes applied to those values consitent with TC's % increases.
# Matt Lewis - June 6 2023
#

using SmallModel

module LDV2

import ...SmallModel: ReadDisk,WriteDisk,Select,HisTime,ITime,MaxTime,First,Last,Future,DB,Final,Yr
import ...SmallModel: @finite_math,finite_inverse,finite_divide,finite_power,finite_exp,finite_log

const VariableArray{N} = Array{Float64,N} where {N}
const SetArray = Vector{String}

Base.@kwdef struct TControl
  db::String

  CalDB::String = "TCalDB"
  Input::String = "TInput"
  Outpt::String = "TOutput"
  BCNameDB::String = ReadDisk(db,"E2020DB/BCNameDB") #  Base Case Name

  Area::SetArray = ReadDisk(db,"E2020DB/AreaKey")
  EC::SetArray = ReadDisk(db,"$Input/ECKey")
  Enduse::SetArray = ReadDisk(db,"$Input/EnduseKey")
  Tech::SetArray = ReadDisk(db,"$Input/TechKey")
  Year::SetArray = ReadDisk(db,"E2020DB/YearKey")
  
  ANMap::VariableArray{2} = ReadDisk(db,"E2020DB/ANMap") # [Area,Nation] Map between Area and Nation
  DEEBase::VariableArray{5} = ReadDisk(BCNameDB,"$Outpt/DEE") # [Enduse,Tech,EC,Area,Year] Base Case Device Efficiency (Mile/mmBtu)
  DEMM::VariableArray{5} = ReadDisk(db,"$CalDB/DEMM") # [Enduse,Tech,EC,Area,Year] Maximum Device Efficiency Multiplier (Btu/Btu)
  DEStdP::VariableArray{5} = ReadDisk(db,"$Input/DEStdP") # [Enduse,Tech,EC,Area,Year] Device Efficiency Standards Policy (Btu/Btu)
 
  #Scratch
  Temps::VariableArray{5} = zeros(Float64,length(Enduse),length(Tech),length(EC),length(Area),length(Year)) # Temps(Enduse,Tech,EC,Area,Year)  TYPE=REAL(8,2)
 end

function TransPolicy(db)
  data = TControl(; db)
  (; CalDB,Input) = data
  (; Area,EC,Enduse,Tech) = data
  (; DEEBase,DEMM,DEStdP,Temps) = data
  
  areas = Select(Area,(from = "ON",to = "NU"))
  enduse = Select(Enduse,"Carriage")
  ec = Select(EC,"Passenger")
      
  tempsData=
  #/                 2013   2014   2015   2016   2017   2018   2019   2020   2021   2022   2023   2024   2025   2026
  "LDVGasoline      230.9  234.9  220.1  222.7  219.6  224.0  226.4  232.9  232.3  236.2  257.5  270.6  286.9  323.9
  LDTGasoline       164.2  167.4  163.6  162.8  162.6  167.1  168.5  173.4  177.4  180.8  201.6  212.5  228.0  252.3
  LDVDiesel         242.4  243.8  250.0  229.3  251.5  243.8  254.0  263.9  263.3  267.6  291.8  306.6  325.1  367.0
  LDTDiesel         162.9  168.1  169.4  168.2  165.7  167.1  166.4  172.9  176.8  180.2  201.0  211.9  227.2  251.6"

  for row in split(tempsData,'\n')
  
    #
    # Separate the elements in each row
    #    
    row_values = strip.(split(row,'\t'))
    row_values = split(row,'\t')
    row_values = [split(value) for value in row_values]
    
    #
    # Use the elements to select the sets
    #    
    t = [string(row_values[1][1])]
    tech = Select(Tech,t)
    for area in areas
      Temps[enduse,tech,ec,area,Yr(2013):Yr(2026)] = 
        parse.(Float64,row_values[1][2:15]) 
    end
    
    years = collect(Future:Yr(2026))
    for year in years, area in areas
      DEStdP[enduse,tech,ec,area,year] .= Temps[enduse,tech,ec,area,year]
    end
    
    years = collect(Yr(2027):Final)
    for year in years, area in areas
      DEStdP[enduse,tech,ec,area,year] .= DEStdP[enduse,tech,ec,area,Yr(2026)]
    end
    
    #
    #* Adjust DEMM based on new standard (DEStd)
    #
    
    DEMM[enduse,tech,ec,areas,Future] .= DEMM[enduse,tech,ec,areas,Last] .* 
      DEStdP[enduse,tech,ec,areas,Future] ./ DEEBase[enduse,tech,ec,areas,Last] 
    NextYear = Future+1
    years = collect(NextYear:Final)
    for year in years, area in areas
      DEMM[enduse,tech,ec,area,year] .= DEMM[enduse,tech,ec,area,year-1] .* 
        DEStdP[enduse,tech,ec,area,year] ./ DEStdP[enduse,tech,ec,area,year-1]
    end
    
  end
  
  WriteDisk(db,"$Input/DEStdP",DEStdP)
  WriteDisk(db,"$CalDB/DEMM",DEMM)
end

function PolicyControl(db)
  @info "LDV2.jl - PolicyControl"
  TransPolicy(db)
end

if abspath(PROGRAM_FILE) == @__FILE__
  PolicyControl(DB)
end

end
